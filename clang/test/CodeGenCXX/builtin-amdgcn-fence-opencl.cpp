// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --check-globals --version 3
// REQUIRES: amdgpu-registered-target
// RUN: %clang_cc1 %s -emit-llvm -O0 -o - \
// RUN:   -triple=amdgcn-amd-amdhsa -Qn -mcode-object-version=none | FileCheck %s

#define LOCAL_MASK (1 << 0)
#define GLOBAL_MASK (1 << 1)
#define IMAGE_MASK (1 << 2)

//.
// CHECK: @.str = private unnamed_addr addrspace(4) constant [10 x i8] c"workgroup\00", align 1
// CHECK: @.str.1 = private unnamed_addr addrspace(4) constant [6 x i8] c"agent\00", align 1
// CHECK: @.str.2 = private unnamed_addr addrspace(4) constant [1 x i8] zeroinitializer, align 1
//.
// CHECK-LABEL: define dso_local void @_Z10test_localv(
// CHECK-SAME: ) #[[ATTR0:[0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    fence syncscope("workgroup") seq_cst, !mmra [[META1:![0-9]+]]
// CHECK-NEXT:    fence syncscope("agent") acquire, !mmra [[META1]]
// CHECK-NEXT:    fence seq_cst, !mmra [[META1]]
// CHECK-NEXT:    fence syncscope("agent") acq_rel, !mmra [[META1]]
// CHECK-NEXT:    fence syncscope("workgroup") release, !mmra [[META1]]
// CHECK-NEXT:    ret void
//
void test_local() {

  __builtin_amdgcn_fence_opencl(LOCAL_MASK, __ATOMIC_SEQ_CST, "workgroup");

  __builtin_amdgcn_fence_opencl(LOCAL_MASK,__ATOMIC_ACQUIRE, "agent");

  __builtin_amdgcn_fence_opencl(LOCAL_MASK,__ATOMIC_SEQ_CST, "");

  __builtin_amdgcn_fence_opencl(LOCAL_MASK, 4, "agent");

  __builtin_amdgcn_fence_opencl(LOCAL_MASK, 3, "workgroup");
}

// CHECK-LABEL: define dso_local void @_Z11test_globalv(
// CHECK-SAME: ) #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    fence syncscope("workgroup") seq_cst, !mmra [[META2:![0-9]+]]
// CHECK-NEXT:    fence syncscope("agent") acquire, !mmra [[META2]]
// CHECK-NEXT:    fence seq_cst, !mmra [[META2]]
// CHECK-NEXT:    fence syncscope("agent") acq_rel, !mmra [[META2]]
// CHECK-NEXT:    fence syncscope("workgroup") release, !mmra [[META2]]
// CHECK-NEXT:    ret void
//
void test_global() {

  __builtin_amdgcn_fence_opencl(GLOBAL_MASK, __ATOMIC_SEQ_CST, "workgroup");

  __builtin_amdgcn_fence_opencl(GLOBAL_MASK,__ATOMIC_ACQUIRE, "agent");

  __builtin_amdgcn_fence_opencl(GLOBAL_MASK,__ATOMIC_SEQ_CST, "");

  __builtin_amdgcn_fence_opencl(GLOBAL_MASK, 4, "agent");

  __builtin_amdgcn_fence_opencl(GLOBAL_MASK, 3, "workgroup");
}

// CHECK-LABEL: define dso_local void @_Z10test_imagev(
// CHECK-SAME: ) #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    fence syncscope("workgroup") seq_cst, !mmra [[META3:![0-9]+]]
// CHECK-NEXT:    fence syncscope("agent") acquire, !mmra [[META3]]
// CHECK-NEXT:    fence seq_cst, !mmra [[META2]]
// CHECK-NEXT:    fence syncscope("agent") acq_rel, !mmra [[META3]]
// CHECK-NEXT:    fence syncscope("workgroup") release, !mmra [[META3]]
// CHECK-NEXT:    ret void
//
void test_image() {

  __builtin_amdgcn_fence_opencl(IMAGE_MASK, __ATOMIC_SEQ_CST, "workgroup");

  __builtin_amdgcn_fence_opencl(IMAGE_MASK,__ATOMIC_ACQUIRE, "agent");

  __builtin_amdgcn_fence_opencl(GLOBAL_MASK,__ATOMIC_SEQ_CST, "");

  __builtin_amdgcn_fence_opencl(IMAGE_MASK, 4, "agent");

  __builtin_amdgcn_fence_opencl(IMAGE_MASK, 3, "workgroup");
}

// CHECK-LABEL: define dso_local void @_Z10test_mixedv(
// CHECK-SAME: ) #[[ATTR0]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    fence syncscope("workgroup") seq_cst, !mmra [[META4:![0-9]+]]
// CHECK-NEXT:    fence syncscope("workgroup") seq_cst, !mmra [[META5:![0-9]+]]
// CHECK-NEXT:    fence syncscope("workgroup") seq_cst, !mmra [[META5]]
// CHECK-NEXT:    ret void
//
void test_mixed() {

  __builtin_amdgcn_fence_opencl(IMAGE_MASK | GLOBAL_MASK, __ATOMIC_SEQ_CST, "workgroup");
  __builtin_amdgcn_fence_opencl(IMAGE_MASK | GLOBAL_MASK | LOCAL_MASK, __ATOMIC_SEQ_CST, "workgroup");

  __builtin_amdgcn_fence_opencl(0xFF,__ATOMIC_SEQ_CST, "workgroup");
}
//.
// CHECK: attributes #[[ATTR0]] = { mustprogress noinline nounwind optnone "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
//.
// CHECK: [[META0:![0-9]+]] = !{i32 1, !"wchar_size", i32 4}
// CHECK: [[META1]] = !{!"opencl-fence-mem", !"local"}
// CHECK: [[META2]] = !{!"opencl-fence-mem", !"global"}
// CHECK: [[META3]] = !{!"opencl-fence-mem", !"image"}
// CHECK: [[META4]] = !{[[META2]], [[META3]]}
// CHECK: [[META5]] = !{[[META1]], [[META2]], [[META3]]}
//.
