; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt < %s -passes=asan -S -mtriple=amdgcn-- | FileCheck %s

%llvm.amdgcn.sw.lds.k0.md.type = type { %llvm.amdgcn.sw.lds.k0.md.item, %llvm.amdgcn.sw.lds.k0.md.item, %llvm.amdgcn.sw.lds.k0.md.item, %llvm.amdgcn.sw.lds.k0.md.item }
%llvm.amdgcn.sw.lds.k0.md.item = type { i32, i32 }
@llvm.amdgcn.sw.lds.k0 = internal addrspace(3) global ptr poison, align 8
@llvm.amdgcn.sw.lds.k0.md = internal addrspace(1) global %llvm.amdgcn.sw.lds.k0.md.type { %llvm.amdgcn.sw.lds.k0.md.item { i32 0, i32 8 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 8, i32 8 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 16, i32 0 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 16, i32 0 } }, no_sanitize_address

define amdgpu_kernel void @k0() sanitize_address {
; CHECK-LABEL: define amdgpu_kernel void @k0(
; CHECK-SAME: ) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  WId:
; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.workitem.id.y()
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.workitem.id.z()
; CHECK-NEXT:    [[TMP3:%.*]] = or i32 [[TMP0]], [[TMP1]]
; CHECK-NEXT:    [[TMP4:%.*]] = or i32 [[TMP3]], [[TMP2]]
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i32 [[TMP4]], 0
; CHECK-NEXT:    br i1 [[TMP5]], label [[MALLOC:%.*]], label [[TMP33:%.*]]
; CHECK:       Malloc:
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 0), align 8
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 1), align 8
; CHECK-NEXT:    [[TMP8:%.*]] = add i64 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds ptr addrspace(4), ptr addrspace(4) [[TMP9]], i32 15
; CHECK-NEXT:    store i64 [[TMP8]], ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 0), align 8
; CHECK-NEXT:    [[TMP11:%.*]] = ptrtoint ptr addrspace(4) [[TMP10]] to i64
; CHECK-NEXT:    [[TMP12:%.*]] = lshr i64 [[TMP11]], 3
; CHECK-NEXT:    [[TMP13:%.*]] = add i64 [[TMP12]], 2147450880
; CHECK-NEXT:    [[TMP14:%.*]] = inttoptr i64 [[TMP13]] to ptr
; CHECK-NEXT:    [[TMP15:%.*]] = load i8, ptr [[TMP14]], align 1
; CHECK-NEXT:    [[TMP16:%.*]] = icmp ne i8 [[TMP15]], 0
; CHECK-NEXT:    [[TMP17:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP16]])
; CHECK-NEXT:    [[TMP18:%.*]] = icmp ne i64 [[TMP17]], 0
; CHECK-NEXT:    br i1 [[TMP18]], label [[ASAN_REPORT:%.*]], label [[TMP21:%.*]], !prof [[PROF0:![0-9]+]]
; CHECK:       asan.report:
; CHECK-NEXT:    br i1 [[TMP16]], label [[TMP19:%.*]], label [[TMP20:%.*]]
; CHECK:       19:
; CHECK-NEXT:    call void @__asan_report_load8(i64 [[TMP11]]) #[[ATTR6:[0-9]+]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP20]]
; CHECK:       20:
; CHECK-NEXT:    br label [[TMP21]]
; CHECK:       21:
; CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr addrspace(4) [[TMP10]], align 8
; CHECK-NEXT:    [[TMP23:%.*]] = add i64 [[TMP22]], 7
; CHECK-NEXT:    [[TMP24:%.*]] = udiv i64 [[TMP23]], 8
; CHECK-NEXT:    [[TMP25:%.*]] = mul i64 [[TMP24]], 8
; CHECK-NEXT:    store i64 [[TMP25]], ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 1), align 8
; CHECK-NEXT:    [[TMP26:%.*]] = add i64 [[TMP8]], [[TMP25]]
; CHECK-NEXT:    store i64 [[TMP26]], ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 0), align 8
; CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr addrspace(4) [[TMP10]], align 8
; CHECK-NEXT:    [[TMP28:%.*]] = add i64 [[TMP27]], 7
; CHECK-NEXT:    [[TMP29:%.*]] = udiv i64 [[TMP28]], 8
; CHECK-NEXT:    [[TMP30:%.*]] = mul i64 [[TMP29]], 8
; CHECK-NEXT:    store i64 [[TMP30]], ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 1), align 8
; CHECK-NEXT:    [[TMP31:%.*]] = add i64 [[TMP26]], [[TMP30]]
; CHECK-NEXT:    [[TMP32:%.*]] = call ptr addrspace(1) @malloc(i64 [[TMP31]])
; CHECK-NEXT:    store ptr addrspace(1) [[TMP32]], ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    [[TMP104:%.*]] = load i64, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 2), align 8
; CHECK-NEXT:    [[TMP105:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP32]], i64 [[TMP104]]
; CHECK-NEXT:    [[TMP106:%.*]] = ptrtoint ptr addrspace(1) [[TMP105]] to i64
; CHECK-NEXT:    [[TMP107:%.*]] = load i64, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 3), align 8
; CHECK-NEXT:    call void @__asan_poison_region(i64 [[TMP106]], i64 [[TMP107]])
; CHECK-NEXT:    [[TMP108:%.*]] = load i64, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 0, i32 2), align 8
; CHECK-NEXT:    [[TMP109:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP32]], i64 [[TMP108]]
; CHECK-NEXT:    [[TMP110:%.*]] = ptrtoint ptr addrspace(1) [[TMP109]] to i64
; CHECK-NEXT:    [[TMP111:%.*]] = load i64, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 0, i32 3), align 8
; CHECK-NEXT:    call void @__asan_poison_region(i64 [[TMP110]], i64 [[TMP111]])
; CHECK-NEXT:    br label [[TMP33]]
; CHECK:       41:
; CHECK-NEXT:    [[XYZCOND:%.*]] = phi i1 [ false, [[WID:%.*]] ], [ true, [[TMP21]] ]
; CHECK-NEXT:    call void @llvm.amdgcn.s.barrier()
; CHECK-NEXT:    [[TMP34:%.*]] = load i32, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, align 4
; CHECK-NEXT:    [[TMP35:%.*]] = getelementptr inbounds ptr addrspace(3), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 [[TMP34]]
; CHECK-NEXT:    [[TMP36:%.*]] = load i32, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 0), align 4
; CHECK-NEXT:    [[TMP37:%.*]] = getelementptr inbounds ptr addrspace(3), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 [[TMP36]]
; CHECK-NEXT:    [[TMP38:%.*]] = load i32, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 0), align 4
; CHECK-NEXT:    [[TMP39:%.*]] = getelementptr inbounds ptr addrspace(3), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 [[TMP38]]
; CHECK-NEXT:    [[TMP40:%.*]] = load i32, ptr addrspace(1) getelementptr inbounds ([[TMP0]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 0), align 4
; CHECK-NEXT:    [[TMP41:%.*]] = getelementptr inbounds ptr addrspace(3), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 [[TMP40]]
; CHECK-NEXT:    [[TMP42:%.*]] = ptrtoint ptr addrspace(3) [[TMP35]] to i64
; CHECK-NEXT:    [[TMP43:%.*]] = lshr i64 [[TMP42]], 3
; CHECK-NEXT:    [[TMP44:%.*]] = add i64 [[TMP43]], 2147450880
; CHECK-NEXT:    [[TMP45:%.*]] = inttoptr i64 [[TMP44]] to ptr
; CHECK-NEXT:    [[TMP46:%.*]] = load i8, ptr [[TMP45]], align 1
; CHECK-NEXT:    [[TMP47:%.*]] = icmp ne i8 [[TMP46]], 0
; CHECK-NEXT:    [[TMP48:%.*]] = and i64 [[TMP42]], 7
; CHECK-NEXT:    [[TMP49:%.*]] = trunc i64 [[TMP48]] to i8
; CHECK-NEXT:    [[TMP50:%.*]] = icmp sge i8 [[TMP49]], [[TMP46]]
; CHECK-NEXT:    [[TMP51:%.*]] = and i1 [[TMP47]], [[TMP50]]
; CHECK-NEXT:    [[TMP52:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP51]])
; CHECK-NEXT:    [[TMP53:%.*]] = icmp ne i64 [[TMP52]], 0
; CHECK-NEXT:    br i1 [[TMP53]], label [[ASAN_REPORT1:%.*]], label [[TMP56:%.*]], !prof [[PROF0]]
; CHECK:       asan.report1:
; CHECK-NEXT:    br i1 [[TMP51]], label [[TMP54:%.*]], label [[TMP55:%.*]]
; CHECK:       62:
; CHECK-NEXT:    call void @__asan_report_store1(i64 [[TMP42]]) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP55]]
; CHECK:       63:
; CHECK-NEXT:    br label [[TMP56]]
; CHECK:       64:
; CHECK-NEXT:    store i8 7, ptr addrspace(3) [[TMP35]], align 4
; CHECK-NEXT:    [[TMP57:%.*]] = ptrtoint ptr addrspace(3) [[TMP37]] to i64
; CHECK-NEXT:    [[TMP58:%.*]] = lshr i64 [[TMP57]], 3
; CHECK-NEXT:    [[TMP59:%.*]] = add i64 [[TMP58]], 2147450880
; CHECK-NEXT:    [[TMP60:%.*]] = inttoptr i64 [[TMP59]] to ptr
; CHECK-NEXT:    [[TMP61:%.*]] = load i8, ptr [[TMP60]], align 1
; CHECK-NEXT:    [[TMP62:%.*]] = icmp ne i8 [[TMP61]], 0
; CHECK-NEXT:    [[TMP63:%.*]] = and i64 [[TMP57]], 7
; CHECK-NEXT:    [[TMP64:%.*]] = add i64 [[TMP63]], 3
; CHECK-NEXT:    [[TMP65:%.*]] = trunc i64 [[TMP64]] to i8
; CHECK-NEXT:    [[TMP66:%.*]] = icmp sge i8 [[TMP65]], [[TMP61]]
; CHECK-NEXT:    [[TMP67:%.*]] = and i1 [[TMP62]], [[TMP66]]
; CHECK-NEXT:    [[TMP68:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP67]])
; CHECK-NEXT:    [[TMP69:%.*]] = icmp ne i64 [[TMP68]], 0
; CHECK-NEXT:    br i1 [[TMP69]], label [[ASAN_REPORT2:%.*]], label [[TMP72:%.*]], !prof [[PROF0]]
; CHECK:       asan.report2:
; CHECK-NEXT:    br i1 [[TMP67]], label [[TMP70:%.*]], label [[TMP71:%.*]]
; CHECK:       78:
; CHECK-NEXT:    call void @__asan_report_store4(i64 [[TMP57]]) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP71]]
; CHECK:       79:
; CHECK-NEXT:    br label [[TMP72]]
; CHECK:       80:
; CHECK-NEXT:    store i32 8, ptr addrspace(3) [[TMP37]], align 8
; CHECK-NEXT:    [[TMP73:%.*]] = ptrtoint ptr addrspace(3) [[TMP39]] to i64
; CHECK-NEXT:    [[TMP74:%.*]] = lshr i64 [[TMP73]], 3
; CHECK-NEXT:    [[TMP75:%.*]] = add i64 [[TMP74]], 2147450880
; CHECK-NEXT:    [[TMP76:%.*]] = inttoptr i64 [[TMP75]] to ptr
; CHECK-NEXT:    [[TMP77:%.*]] = load i8, ptr [[TMP76]], align 1
; CHECK-NEXT:    [[TMP78:%.*]] = icmp ne i8 [[TMP77]], 0
; CHECK-NEXT:    [[TMP79:%.*]] = and i64 [[TMP73]], 7
; CHECK-NEXT:    [[TMP80:%.*]] = trunc i64 [[TMP79]] to i8
; CHECK-NEXT:    [[TMP81:%.*]] = icmp sge i8 [[TMP80]], [[TMP77]]
; CHECK-NEXT:    [[TMP82:%.*]] = and i1 [[TMP78]], [[TMP81]]
; CHECK-NEXT:    [[TMP83:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP82]])
; CHECK-NEXT:    [[TMP84:%.*]] = icmp ne i64 [[TMP83]], 0
; CHECK-NEXT:    br i1 [[TMP84]], label [[ASAN_REPORT3:%.*]], label [[TMP87:%.*]], !prof [[PROF0]]
; CHECK:       asan.report3:
; CHECK-NEXT:    br i1 [[TMP82]], label [[TMP85:%.*]], label [[TMP86:%.*]]
; CHECK:       93:
; CHECK-NEXT:    call void @__asan_report_store1(i64 [[TMP73]]) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP86]]
; CHECK:       94:
; CHECK-NEXT:    br label [[TMP87]]
; CHECK:       95:
; CHECK-NEXT:    store i8 7, ptr addrspace(3) [[TMP39]], align 4
; CHECK-NEXT:    [[TMP88:%.*]] = ptrtoint ptr addrspace(3) [[TMP41]] to i64
; CHECK-NEXT:    [[TMP89:%.*]] = lshr i64 [[TMP88]], 3
; CHECK-NEXT:    [[TMP90:%.*]] = add i64 [[TMP89]], 2147450880
; CHECK-NEXT:    [[TMP91:%.*]] = inttoptr i64 [[TMP90]] to ptr
; CHECK-NEXT:    [[TMP92:%.*]] = load i8, ptr [[TMP91]], align 1
; CHECK-NEXT:    [[TMP93:%.*]] = icmp ne i8 [[TMP92]], 0
; CHECK-NEXT:    [[TMP94:%.*]] = and i64 [[TMP88]], 7
; CHECK-NEXT:    [[TMP95:%.*]] = trunc i64 [[TMP94]] to i8
; CHECK-NEXT:    [[TMP96:%.*]] = icmp sge i8 [[TMP95]], [[TMP92]]
; CHECK-NEXT:    [[TMP97:%.*]] = and i1 [[TMP93]], [[TMP96]]
; CHECK-NEXT:    [[TMP98:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP97]])
; CHECK-NEXT:    [[TMP99:%.*]] = icmp ne i64 [[TMP98]], 0
; CHECK-NEXT:    br i1 [[TMP99]], label [[ASAN_REPORT4:%.*]], label [[TMP102:%.*]], !prof [[PROF0]]
; CHECK:       asan.report4:
; CHECK-NEXT:    br i1 [[TMP97]], label [[TMP100:%.*]], label [[TMP101:%.*]]
; CHECK:       108:
; CHECK-NEXT:    call void @__asan_report_store1(i64 [[TMP88]]) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label [[TMP101]]
; CHECK:       109:
; CHECK-NEXT:    br label [[TMP102]]
; CHECK:       110:
; CHECK-NEXT:    store i8 8, ptr addrspace(3) [[TMP41]], align 8
; CHECK-NEXT:    br label [[CONDFREE:%.*]]
; CHECK:       CondFree:
; CHECK-NEXT:    call void @llvm.amdgcn.s.barrier()
; CHECK-NEXT:    br i1 [[XYZCOND]], label [[FREE:%.*]], label [[END:%.*]]
; CHECK:       Free:
; CHECK-NEXT:    [[TMP103:%.*]] = load ptr, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    call void @free(ptr [[TMP103]])
; CHECK-NEXT:    br label [[END]]
; CHECK:       End:
; CHECK-NEXT:    ret void
;
WId:
  %0 = call i32 @llvm.amdgcn.workitem.id.x()
  %1 = call i32 @llvm.amdgcn.workitem.id.y()
  %2 = call i32 @llvm.amdgcn.workitem.id.z()
  %3 = or i32 %0, %1
  %4 = or i32 %3, %2
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %Malloc, label %22

Malloc:                                           ; preds = %WId
  %6 = load i64, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 0), align 8
  %7 = load i64, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 1), align 8
  %8 = add i64 %6, %7
  %9 = call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %10 = getelementptr inbounds ptr addrspace(4), ptr addrspace(4) %9, i32 15
  store i64 %8, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 0), align 8
  %11 = load i64, ptr addrspace(4) %10, align 8
  %12 = add i64 %11, 7
  %13 = udiv i64 %12, 8
  %14 = mul i64 %13, 8
  store i64 %14, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 1), align 8
  %15 = add i64 %8, %14
  store i64 %15, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 0), align 8
  %16 = load i64, ptr addrspace(4) %10, align 8
  %17 = add i64 %16, 7
  %18 = udiv i64 %17, 8
  %19 = mul i64 %18, 8
  store i64 %19, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 1), align 8
  %20 = add i64 %15, %19
  %21 = call ptr addrspace(1) @malloc(i64 %20)
  store ptr addrspace(1) %21, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
  br label %22

22:                                               ; preds = %Malloc, %WId
  %xyzCond = phi i1 [ false, %WId ], [ true, %Malloc ]
  call void @llvm.amdgcn.s.barrier()
  %23 = load i32, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, align 4
  %24 = getelementptr inbounds ptr addrspace(3), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 %23
  %25 = load i32, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 0), align 4
  %26 = getelementptr inbounds ptr addrspace(3), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 %25
  %27 = load i32, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 0), align 4
  %28 = getelementptr inbounds ptr addrspace(3), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 %27
  %29 = load i32, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 0), align 4
  %30 = getelementptr inbounds ptr addrspace(3), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 %29
  store i8 7, ptr addrspace(3) %24, align 4
  store i32 8, ptr addrspace(3) %26, align 8
  store i8 7, ptr addrspace(3) %28, align 4
  store i8 8, ptr addrspace(3) %30, align 8
  br label %CondFree

CondFree:                                         ; preds = %22
  call void @llvm.amdgcn.s.barrier()
  br i1 %xyzCond, label %Free, label %End

Free:                                             ; preds = %CondFree
  %31 = load ptr, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
  call void @free(ptr %31)
  br label %End

End:                                              ; preds = %Free, %CondFree
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.y() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.z() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare align 4 ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr() #0

declare ptr addrspace(1) @malloc(i64)

; Function Attrs: convergent nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #1

declare void @free(ptr)

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nofree nounwind willreturn }
;.
; CHECK: [[PROF0]] = !{!"branch_weights", i32 1, i32 100000}
;.
